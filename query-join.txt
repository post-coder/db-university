1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia

SELECT students.*, degrees.name AS 'corso'
FROM `students`
INNER JOIN degrees
ON students.degree_id = degrees.id
WHERE degree_id = 53  
ORDER BY `students`.`date_of_birth`  ASC;


2. Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di
Neuroscienze

SELECT degrees.*, departments.name AS 'dipartimento'
FROM `degrees`
INNER JOIN departments
ON degrees.department_id = departments.id
WHERE department_id = 7 AND level = 'magistrale';


3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44)

SELECT `courses`.*, teachers.surname AS 'insegnante'
FROM `courses`
INNER JOIN course_teacher
ON courses.id = course_teacher.course_id
INNER JOIN teachers
ON course_teacher.teacher_id = teachers.id
WHERE teachers.id = 44;


4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui
sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e
nome

SELECT * 
FROM `students`
INNER JOIN degrees
ON students.degree_id = degrees.id
INNER JOIN departments
ON degrees.department_id = departments.id
ORDER BY students.surname, students.name;


5. Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti

SELECT `degrees`.name AS 'corso_di_laurea',  courses.name AS 'corso', teachers.name AS 'nome', teachers.surname AS 'cognome'
FROM `degrees`
INNER JOIN courses
ON courses.degree_id = degrees.id
INNER JOIN course_teacher
ON courses.id = course_teacher.course_id
INNER JOIN teachers
ON course_teacher.teacher_id = teachers.id  
ORDER BY `corso_di_laurea` ASC


6. Selezionare tutti i docenti che insegnano nel Dipartimento di
Matematica (54)

SELECT teachers.*, departments.name
FROM `teachers` 
INNER JOIN course_teacher
ON teachers.id = course_teacher.teacher_id
INNER JOIN courses
ON course_teacher.course_id = courses.id
INNER JOIN degrees
ON courses.degree_id = degrees.id
INNER JOIN departments
ON degrees.department_id = departments.id
WHERE departments.id = 5  
GROUP BY teachers.id
ORDER BY `teachers`.`surname` ASC;


7. BONUS: Selezionare per ogni studente il numero di tentativi sostenuti
per ogni esame, stampando anche il voto massimo. Successivamente,
filtrare i tentativi con voto minimo 18.

7.1
SELECT students.name, students.surname, COUNT(courses.id) AS 'tentativi', courses.name AS 'corso', MAX(exam_student.vote) AS 'voto_massimo'
FROM `students`
INNER JOIN exam_student
ON students.id = exam_student.student_id 
INNER JOIN exams
ON exam_student.exam_id = exams.id
INNER JOIN courses
ON exams.course_id = courses.id
GROUP BY students.id, exams.course_id;

7.1
SELECT students.name, students.surname, COUNT(courses.id) AS 'tentativi', courses.name AS 'corso', MAX(exam_student.vote) AS 'voto_massimo'
FROM `students`
INNER JOIN exam_student
ON students.id = exam_student.student_id 
INNER JOIN exams
ON exam_student.exam_id = exams.id
INNER JOIN courses
ON exams.course_id = courses.id
WHERE exam_student.vote >= 18
GROUP BY students.id, exams.course_id;


